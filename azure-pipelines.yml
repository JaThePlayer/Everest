# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

name: '$(Build.BuildId)+$(Build.BuildIdOffset)'

steps:
# Pre-build steps.
- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
- task: PowerShell@2
  displayName: 'Run azure-pipelines-prebuild.ps1'
  inputs:
    filePath: 'azure-pipelines-prebuild.ps1'

# Build.
- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) "/p:Configuration=$(buildConfiguration)"'

# Create and "publish" main artifact.
- task: CopyFiles@2
  displayName: 'Pack artifact'
  continueOnError: true
  inputs:
    sourceFolder: '$(Agent.BuildDirectory)'
    contents: '**/bin/**/*'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    cleanTargetFolder: true
    overWrite: true
    flattenFolders: true
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifact'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'main'
    publishLocation: 'Container'

# Post-build steps (obsolete).
- task: PowerShell@2
# condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  condition: not(always())
  displayName: 'Run azure-pipelines-postbuild.ps1'
  inputs:
    filePath: 'azure-pipelines-postbuild.ps1'
    arguments: '$(S3KEY) $(S3SECRET)'

# Announce new stable versions on Discord (#modding_updates).
- script: |
    set /a "BUILD_NUMBER=$(Build.BuildId)+$(Build.BuildIdOffset)"
    curl -H "Content-Type: application/json" -d "{\"content\": \"**A new Everest stable was just released!**\nThe latest stable version is now **%BUILD_NUMBER%**.\"}" $(WEBHOOK_URL)
  displayName: 'Celeste Discord webhook'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/stable'))
